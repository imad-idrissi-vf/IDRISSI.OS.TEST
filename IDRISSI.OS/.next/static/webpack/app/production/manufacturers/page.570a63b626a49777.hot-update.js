"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/production/manufacturers/page",{

/***/ "(app-pages-browser)/./lib/manufacturers/manufacturer-store.ts":
/*!*************************************************!*\
  !*** ./lib/manufacturers/manufacturer-store.ts ***!
  \*************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useManufacturerStore: () => (/* binding */ useManufacturerStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _manufacturer_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./manufacturer-data */ \"(app-pages-browser)/./lib/manufacturers/manufacturer-data.ts\");\n\n\n\nconst applyFilters = (manufacturers, filters)=>{\n    return manufacturers.filter((manufacturer)=>{\n        // Search filter\n        if (filters.search) {\n            const searchLower = filters.search.toLowerCase();\n            const matchesSearch = manufacturer.name.toLowerCase().includes(searchLower) || manufacturer.contactPerson.toLowerCase().includes(searchLower) || manufacturer.email.toLowerCase().includes(searchLower) || manufacturer.phone.toLowerCase().includes(searchLower) || manufacturer.location.city.toLowerCase().includes(searchLower) || manufacturer.location.country.toLowerCase().includes(searchLower);\n            if (!matchesSearch) return false;\n        }\n        // Category filter\n        if (filters.category && manufacturer.category !== filters.category) {\n            return false;\n        }\n        // Contact status filter\n        if (filters.contactStatus && manufacturer.contactStatus !== filters.contactStatus) {\n            return false;\n        }\n        // Certification filter\n        if (filters.certifications.length > 0) {\n            const hasMatchingCertification = manufacturer.certifications.some((cert)=>filters.certifications.includes(cert));\n            if (!hasMatchingCertification) return false;\n        }\n        // Archived filter\n        if (!filters.showArchived && manufacturer.isArchived) {\n            return false;\n        }\n        return true;\n    });\n};\nconst useManufacturerStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set, get)=>({\n        // Initial state\n        manufacturers: _manufacturer_data__WEBPACK_IMPORTED_MODULE_0__.mockManufacturers,\n        filteredManufacturers: _manufacturer_data__WEBPACK_IMPORTED_MODULE_0__.mockManufacturers,\n        selectedRows: [],\n        isAddModalOpen: false,\n        isDetailOpen: false,\n        selectedManufacturerId: null,\n        filters: {\n            search: \"\",\n            category: null,\n            contactStatus: null,\n            certifications: [],\n            showArchived: false\n        },\n        // Filter actions\n        setSearchFilter: (query)=>{\n            set((state)=>{\n                const newFilters = {\n                    ...state.filters,\n                    search: query\n                };\n                return {\n                    filters: newFilters,\n                    filteredManufacturers: applyFilters(state.manufacturers, newFilters)\n                };\n            });\n        },\n        setCategoryFilter: (categories)=>{\n            set((state)=>{\n                const newFilters = {\n                    ...state.filters,\n                    category: categories.length > 0 ? categories[0] : null\n                };\n                return {\n                    filters: newFilters,\n                    filteredManufacturers: applyFilters(state.manufacturers, newFilters)\n                };\n            });\n        },\n        setContactStatusFilter: (statuses)=>{\n            set((state)=>{\n                const newFilters = {\n                    ...state.filters,\n                    contactStatus: statuses.length > 0 ? statuses[0] : null\n                };\n                return {\n                    filters: newFilters,\n                    filteredManufacturers: applyFilters(state.manufacturers, newFilters)\n                };\n            });\n        },\n        setCountryFilter: (countries)=>{\n            set((state)=>{\n                const newFilters = {\n                    ...state.filters,\n                    countries\n                };\n                return {\n                    filters: newFilters,\n                    filteredManufacturers: applyFilters(state.manufacturers, newFilters)\n                };\n            });\n        },\n        setCertificationFilter: (certifications)=>{\n            set((state)=>{\n                const newFilters = {\n                    ...state.filters,\n                    certifications\n                };\n                return {\n                    filters: newFilters,\n                    filteredManufacturers: applyFilters(state.manufacturers, newFilters)\n                };\n            });\n        },\n        toggleShowArchived: ()=>{\n            set((state)=>{\n                const newFilters = {\n                    ...state.filters,\n                    showArchived: !state.filters.showArchived\n                };\n                return {\n                    filters: newFilters,\n                    filteredManufacturers: applyFilters(state.manufacturers, newFilters)\n                };\n            });\n        },\n        clearFilters: ()=>{\n            set((state)=>{\n                const newFilters = {\n                    search: \"\",\n                    category: null,\n                    contactStatus: null,\n                    certifications: [],\n                    showArchived: false\n                };\n                return {\n                    filters: newFilters,\n                    filteredManufacturers: state.manufacturers\n                };\n            });\n        },\n        // Modal actions\n        openAddModal: ()=>set({\n                isAddModalOpen: true\n            }),\n        closeAddModal: ()=>set({\n                isAddModalOpen: false\n            }),\n        openDetail: ()=>set({\n                isDetailOpen: true\n            }),\n        closeDetail: ()=>set({\n                isDetailOpen: false,\n                selectedManufacturerId: null\n            }),\n        selectManufacturer: (id)=>set({\n                selectedManufacturerId: id\n            }),\n        // Manufacturer actions\n        addManufacturer: (manufacturer)=>{\n            const newManufacturer = {\n                ...manufacturer,\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(),\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString()\n            };\n            set((state)=>{\n                const newManufacturers = [\n                    ...state.manufacturers,\n                    newManufacturer\n                ];\n                return {\n                    manufacturers: newManufacturers,\n                    filteredManufacturers: applyFilters(newManufacturers, state.filters)\n                };\n            });\n        },\n        updateManufacturer: (id, data)=>{\n            set((state)=>{\n                const newManufacturers = state.manufacturers.map((manufacturer)=>manufacturer.id === id ? {\n                        ...manufacturer,\n                        ...data,\n                        updatedAt: new Date().toISOString()\n                    } : manufacturer);\n                return {\n                    manufacturers: newManufacturers,\n                    filteredManufacturers: applyFilters(newManufacturers, state.filters)\n                };\n            });\n        },\n        archiveManufacturer: (id)=>{\n            set((state)=>{\n                const newManufacturers = state.manufacturers.map((manufacturer)=>manufacturer.id === id ? {\n                        ...manufacturer,\n                        isArchived: true\n                    } : manufacturer);\n                return {\n                    manufacturers: newManufacturers,\n                    filteredManufacturers: applyFilters(newManufacturers, state.filters)\n                };\n            });\n        },\n        restoreManufacturer: (id)=>{\n            set((state)=>{\n                const newManufacturers = state.manufacturers.map((manufacturer)=>manufacturer.id === id ? {\n                        ...manufacturer,\n                        isArchived: false\n                    } : manufacturer);\n                return {\n                    manufacturers: newManufacturers,\n                    filteredManufacturers: applyFilters(newManufacturers, state.filters)\n                };\n            });\n        },\n        // Selection actions\n        toggleRowSelection: (id)=>{\n            set((state)=>{\n                const newSelectedRows = state.selectedRows.includes(id) ? state.selectedRows.filter((rowId)=>rowId !== id) : [\n                    ...state.selectedRows,\n                    id\n                ];\n                return {\n                    selectedRows: newSelectedRows\n                };\n            });\n        },\n        selectAllRows: ()=>{\n            set((state)=>({\n                    selectedRows: state.filteredManufacturers.map((m)=>m.id)\n                }));\n        },\n        clearSelectedRows: ()=>set({\n                selectedRows: []\n            }),\n        // Bulk actions\n        bulkArchive: ()=>{\n            set((state)=>{\n                const newManufacturers = state.manufacturers.map((manufacturer)=>state.selectedRows.includes(manufacturer.id) ? {\n                        ...manufacturer,\n                        isArchived: true\n                    } : manufacturer);\n                return {\n                    manufacturers: newManufacturers,\n                    filteredManufacturers: applyFilters(newManufacturers, state.filters),\n                    selectedRows: []\n                };\n            });\n        },\n        bulkRestore: ()=>{\n            set((state)=>{\n                const newManufacturers = state.manufacturers.map((manufacturer)=>state.selectedRows.includes(manufacturer.id) ? {\n                        ...manufacturer,\n                        isArchived: false\n                    } : manufacturer);\n                return {\n                    manufacturers: newManufacturers,\n                    filteredManufacturers: applyFilters(newManufacturers, state.filters),\n                    selectedRows: []\n                };\n            });\n        },\n        bulkAddCertification: (certification)=>{\n            set((state)=>{\n                const newManufacturers = state.manufacturers.map((manufacturer)=>state.selectedRows.includes(manufacturer.id) ? {\n                        ...manufacturer,\n                        certifications: [\n                            ...manufacturer.certifications,\n                            certification\n                        ],\n                        updatedAt: new Date().toISOString()\n                    } : manufacturer);\n                return {\n                    manufacturers: newManufacturers,\n                    filteredManufacturers: applyFilters(newManufacturers, state.filters),\n                    selectedRows: []\n                };\n            });\n        },\n        // Notes and files actions\n        addNote: (manufacturerId, note)=>{\n            const newNote = {\n                ...note,\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(),\n                timestamp: new Date().toISOString()\n            };\n            set((state)=>{\n                const newManufacturers = state.manufacturers.map((manufacturer)=>manufacturer.id === manufacturerId ? {\n                        ...manufacturer,\n                        notes: [\n                            ...manufacturer.notes,\n                            newNote\n                        ],\n                        updatedAt: new Date().toISOString()\n                    } : manufacturer);\n                return {\n                    manufacturers: newManufacturers,\n                    filteredManufacturers: applyFilters(newManufacturers, state.filters)\n                };\n            });\n        },\n        addFile: (manufacturerId, file)=>{\n            const newFile = {\n                ...file,\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])()\n            };\n            set((state)=>{\n                const newManufacturers = state.manufacturers.map((manufacturer)=>manufacturer.id === manufacturerId ? {\n                        ...manufacturer,\n                        files: [\n                            ...manufacturer.files,\n                            newFile\n                        ],\n                        updatedAt: new Date().toISOString()\n                    } : manufacturer);\n                return {\n                    manufacturers: newManufacturers,\n                    filteredManufacturers: applyFilters(newManufacturers, state.filters)\n                };\n            });\n        },\n        removeFile: (manufacturerId, fileId)=>{\n            set((state)=>{\n                const newManufacturers = state.manufacturers.map((manufacturer)=>manufacturer.id === manufacturerId ? {\n                        ...manufacturer,\n                        files: manufacturer.files.filter((file)=>file.id !== fileId),\n                        updatedAt: new Date().toISOString()\n                    } : manufacturer);\n                return {\n                    manufacturers: newManufacturers,\n                    filteredManufacturers: applyFilters(newManufacturers, state.filters)\n                };\n            });\n        }\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/manufacturers/manufacturer-store.ts\n"));

/***/ })

});