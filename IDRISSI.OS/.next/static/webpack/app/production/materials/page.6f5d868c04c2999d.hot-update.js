"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/production/materials/page",{

/***/ "(app-pages-browser)/./lib/materials/material-store.ts":
/*!*****************************************!*\
  !*** ./lib/materials/material-store.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMaterialStore: () => (/* binding */ useMaterialStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var _material_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./material-data */ \"(app-pages-browser)/./lib/materials/material-data.ts\");\n\n\nconst useMaterialStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set, get)=>({\n        materials: _material_data__WEBPACK_IMPORTED_MODULE_0__.mockMaterials,\n        filteredMaterials: _material_data__WEBPACK_IMPORTED_MODULE_0__.mockMaterials,\n        searchTerm: \"\",\n        statusFilter: \"all\",\n        campaignFilter: \"all\",\n        tagsFilter: [],\n        setSearchTerm: (term)=>{\n            set({\n                searchTerm: term\n            });\n            applyFilters(get, set);\n        },\n        setStatusFilter: (status)=>{\n            set({\n                statusFilter: status\n            });\n            applyFilters(get, set);\n        },\n        setCampaignFilter: (campaign)=>{\n            set({\n                campaignFilter: campaign\n            });\n            applyFilters(get, set);\n        },\n        setTagsFilter: (tags)=>{\n            set({\n                tagsFilter: tags\n            });\n            applyFilters(get, set);\n        },\n        addMaterial: (materialData)=>{\n            const id = \"MAT-\".concat(Math.floor(Math.random() * 10000));\n            const now = new Date().toISOString();\n            const newMaterial = {\n                ...materialData,\n                id,\n                createdAt: now,\n                updatedAt: now\n            };\n            set((state)=>({\n                    materials: [\n                        ...state.materials,\n                        newMaterial\n                    ],\n                    filteredMaterials: [\n                        ...state.filteredMaterials,\n                        newMaterial\n                    ]\n                }));\n        },\n        updateMaterial: (id, materialData)=>{\n            set((state)=>{\n                const updatedMaterials = state.materials.map((material)=>{\n                    if (material.id === id) {\n                        return {\n                            ...material,\n                            ...materialData,\n                            updatedAt: new Date().toISOString()\n                        };\n                    }\n                    return material;\n                });\n                return {\n                    materials: updatedMaterials,\n                    filteredMaterials: updatedMaterials\n                };\n            });\n        },\n        archiveMaterial: (id)=>{\n            set((state)=>{\n                const updatedMaterials = state.materials.map((material)=>material.id === id ? {\n                        ...material,\n                        status: \"archived\"\n                    } : material);\n                return {\n                    materials: updatedMaterials,\n                    filteredMaterials: updatedMaterials\n                };\n            });\n        },\n        duplicateMaterial: (id)=>{\n            set((state)=>{\n                const materialToDuplicate = state.materials.find((m)=>m.id === id);\n                if (!materialToDuplicate) return state;\n                const newId = \"MAT-\".concat(Math.floor(Math.random() * 10000));\n                const now = new Date().toISOString();\n                const duplicatedMaterial = {\n                    ...materialToDuplicate,\n                    id: newId,\n                    title: \"\".concat(materialToDuplicate.title, \" (Copy)\"),\n                    status: \"draft\",\n                    createdAt: now,\n                    updatedAt: now\n                };\n                return {\n                    materials: [\n                        ...state.materials,\n                        duplicatedMaterial\n                    ],\n                    filteredMaterials: [\n                        ...state.filteredMaterials,\n                        duplicatedMaterial\n                    ]\n                };\n            });\n        },\n        bulkArchiveMaterials: (ids)=>{\n            set((state)=>{\n                const updatedMaterials = state.materials.map((material)=>ids.includes(material.id) ? {\n                        ...material,\n                        status: \"archived\"\n                    } : material);\n                return {\n                    materials: updatedMaterials,\n                    filteredMaterials: updatedMaterials\n                };\n            });\n        },\n        bulkDuplicateMaterials: (ids)=>{\n            set((state)=>{\n                const materialsToDuplicate = state.materials.filter((m)=>ids.includes(m.id));\n                const now = new Date().toISOString();\n                const duplicatedMaterials = materialsToDuplicate.map((material)=>({\n                        ...material,\n                        id: \"MAT-\".concat(Math.floor(Math.random() * 10000)),\n                        title: \"\".concat(material.title, \" (Copy)\"),\n                        status: \"draft\",\n                        createdAt: now,\n                        updatedAt: now\n                    }));\n                return {\n                    materials: [\n                        ...state.materials,\n                        ...duplicatedMaterials\n                    ],\n                    filteredMaterials: [\n                        ...state.filteredMaterials,\n                        ...duplicatedMaterials\n                    ]\n                };\n            });\n        },\n        bulkDeleteMaterials: (ids)=>{\n            set((state)=>({\n                    materials: state.materials.filter((material)=>!ids.includes(material.id)),\n                    filteredMaterials: state.filteredMaterials.filter((material)=>!ids.includes(material.id))\n                }));\n        }\n    }));\n// Helper function to apply all filters\nfunction applyFilters(get, set) {\n    const { materials, searchTerm, statusFilter, campaignFilter, tagsFilter } = get();\n    let filtered = [\n        ...materials\n    ];\n    // Apply search filter\n    if (searchTerm) {\n        const term = searchTerm.toLowerCase();\n        filtered = filtered.filter((material)=>material.title.toLowerCase().includes(term));\n    }\n    // Apply status filter\n    if (statusFilter !== \"all\") {\n        filtered = filtered.filter((material)=>material.status === statusFilter);\n    }\n    // Apply campaign filter\n    if (campaignFilter !== \"all\") {\n        filtered = filtered.filter((material)=>material.campaign === campaignFilter);\n    }\n    // Apply tag filter\n    if (tagsFilter.length > 0) {\n        filtered = filtered.filter((material)=>material.tags.some((tag)=>tagsFilter.includes(tag)));\n    }\n    set({\n        filteredMaterials: filtered\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/materials/material-store.ts\n"));

/***/ })

});