"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/production/materials/page",{

/***/ "(app-pages-browser)/./lib/materials/material-store.ts":
/*!*****************************************!*\
  !*** ./lib/materials/material-store.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMaterialStore: () => (/* binding */ useMaterialStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var _material_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./material-data */ \"(app-pages-browser)/./lib/materials/material-data.ts\");\n\n\nconst applyFilters = (materials, filters)=>{\n    return materials.filter((material)=>{\n        // Search filter\n        if (filters.search) {\n            var _material_contactPerson, _material_email;\n            const searchLower = filters.search.toLowerCase();\n            const matchesSearch = material.name.toLowerCase().includes(searchLower) || ((_material_contactPerson = material.contactPerson) === null || _material_contactPerson === void 0 ? void 0 : _material_contactPerson.toLowerCase().includes(searchLower)) || ((_material_email = material.email) === null || _material_email === void 0 ? void 0 : _material_email.toLowerCase().includes(searchLower));\n            if (!matchesSearch) return false;\n        }\n        // Category filter\n        if (filters.category && material.type !== filters.category) {\n            return false;\n        }\n        // Contact status filter\n        if (filters.contactStatus && material.status !== filters.contactStatus) {\n            return false;\n        }\n        // Certification filter\n        if (filters.certifications.length > 0) {\n            const hasCertification = material.certifications.some((cert)=>filters.certifications.includes(cert));\n            if (!hasCertification) return false;\n        }\n        // Show archived filter\n        if (!filters.showArchived && material.isArchived) {\n            return false;\n        }\n        return true;\n    });\n};\nconst useMaterialStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set, get)=>({\n        materials: _material_data__WEBPACK_IMPORTED_MODULE_0__.mockMaterials || [],\n        filteredMaterials: _material_data__WEBPACK_IMPORTED_MODULE_0__.mockMaterials || [],\n        selectedRows: [],\n        isModalOpen: false,\n        selectedMaterialId: null,\n        filters: {\n            search: '',\n            category: null,\n            contactStatus: null,\n            certifications: [],\n            showArchived: false\n        },\n        searchQuery: \"\",\n        setSearchFilter: (query)=>set((state)=>{\n                const newFilters = {\n                    ...state.filters,\n                    search: query\n                };\n                return {\n                    filters: newFilters,\n                    filteredMaterials: applyFilters(state.materials, newFilters)\n                };\n            }),\n        setCategoryFilter: (category)=>set((state)=>{\n                const newFilters = {\n                    ...state.filters,\n                    category\n                };\n                return {\n                    filters: newFilters,\n                    filteredMaterials: applyFilters(state.materials, newFilters)\n                };\n            }),\n        setContactStatusFilter: (status)=>set((state)=>{\n                const newFilters = {\n                    ...state.filters,\n                    contactStatus: status\n                };\n                return {\n                    filters: newFilters,\n                    filteredMaterials: applyFilters(state.materials, newFilters)\n                };\n            }),\n        setCertificationFilter: (certifications)=>set((state)=>{\n                const newFilters = {\n                    ...state.filters,\n                    certifications\n                };\n                return {\n                    filters: newFilters,\n                    filteredMaterials: applyFilters(state.materials, newFilters)\n                };\n            }),\n        toggleShowArchived: ()=>set((state)=>{\n                const newFilters = {\n                    ...state.filters,\n                    showArchived: !state.filters.showArchived\n                };\n                return {\n                    filters: newFilters,\n                    filteredMaterials: applyFilters(state.materials, newFilters)\n                };\n            }),\n        clearFilters: ()=>set((state)=>{\n                const newFilters = {\n                    search: '',\n                    category: null,\n                    contactStatus: null,\n                    certifications: [],\n                    showArchived: false\n                };\n                return {\n                    filters: newFilters,\n                    filteredMaterials: applyFilters(state.materials, newFilters)\n                };\n            }),\n        openModal: ()=>set({\n                isModalOpen: true\n            }),\n        closeModal: ()=>set({\n                isModalOpen: false\n            }),\n        selectMaterial: (id)=>set({\n                selectedMaterialId: id\n            }),\n        addMaterial: (data)=>set((state)=>{\n                const newMaterial = {\n                    ...data,\n                    id: Math.random().toString(36).substr(2, 9),\n                    createdAt: new Date().toISOString(),\n                    updatedAt: new Date().toISOString()\n                };\n                const materials = [\n                    ...state.materials,\n                    newMaterial\n                ];\n                return {\n                    materials,\n                    filteredMaterials: applyFilters(materials, state.filters)\n                };\n            }),\n        updateMaterial: (id, data)=>set((state)=>{\n                const materials = state.materials.map((m)=>m.id === id ? {\n                        ...m,\n                        ...data,\n                        updatedAt: new Date().toISOString()\n                    } : m);\n                return {\n                    materials,\n                    filteredMaterials: applyFilters(materials, state.filters)\n                };\n            }),\n        archiveMaterial: (id)=>set((state)=>{\n                const materials = state.materials.map((m)=>m.id === id ? {\n                        ...m,\n                        isArchived: true,\n                        updatedAt: new Date().toISOString()\n                    } : m);\n                return {\n                    materials,\n                    filteredMaterials: applyFilters(materials, state.filters)\n                };\n            }),\n        restoreMaterial: (id)=>set((state)=>{\n                const materials = state.materials.map((m)=>m.id === id ? {\n                        ...m,\n                        isArchived: false,\n                        updatedAt: new Date().toISOString()\n                    } : m);\n                return {\n                    materials,\n                    filteredMaterials: applyFilters(materials, state.filters)\n                };\n            }),\n        bulkArchive: ()=>set((state)=>{\n                const materials = state.materials.map((m)=>state.selectedRows.includes(m.id) ? {\n                        ...m,\n                        isArchived: true,\n                        updatedAt: new Date().toISOString()\n                    } : m);\n                return {\n                    materials,\n                    filteredMaterials: applyFilters(materials, state.filters),\n                    selectedRows: []\n                };\n            }),\n        bulkRestore: ()=>set((state)=>{\n                const materials = state.materials.map((m)=>state.selectedRows.includes(m.id) ? {\n                        ...m,\n                        isArchived: false,\n                        updatedAt: new Date().toISOString()\n                    } : m);\n                return {\n                    materials,\n                    filteredMaterials: applyFilters(materials, state.filters),\n                    selectedRows: []\n                };\n            }),\n        bulkAddCertification: (certification)=>set((state)=>{\n                const materials = state.materials.map((m)=>state.selectedRows.includes(m.id) ? {\n                        ...m,\n                        certifications: m.certifications.includes(certification) ? m.certifications : [\n                            ...m.certifications,\n                            certification\n                        ],\n                        updatedAt: new Date().toISOString()\n                    } : m);\n                return {\n                    materials,\n                    filteredMaterials: applyFilters(materials, state.filters),\n                    selectedRows: []\n                };\n            }),\n        setSearchQuery: (query)=>{\n            set({\n                searchQuery: query\n            });\n            const { materials, filters } = get();\n            set({\n                filteredMaterials: applyFilters(materials, query, filters)\n            });\n        },\n        setFilters: (newFilters)=>{\n            set({\n                filters: newFilters\n            });\n            const { materials, searchQuery } = get();\n            set({\n                filteredMaterials: applyFilters(materials, searchQuery, newFilters)\n            });\n        }\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/materials/material-store.ts\n"));

/***/ })

});